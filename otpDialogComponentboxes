
import android.annotation.SuppressLint
import android.view.KeyEvent.KEYCODE_DEL
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.Orientation
import androidx.compose.foundation.gestures.ScrollableDefaults
import androidx.compose.foundation.gestures.ScrollableState
import androidx.compose.foundation.gestures.scrollable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.ui.input.key.KeyEvent
import androidx.compose.ui.input.key.Key
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.AlertDialog
import androidx.compose.material.Button
import androidx.compose.material.Text
import androidx.compose.material.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.ExperimentalComposeUiApi
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.focus.FocusDirection
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.focus.onFocusChanged
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.key.key
import androidx.compose.ui.input.key.onKeyEvent
import androidx.compose.ui.input.key.onPreviewKeyEvent
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp


@Composable
fun OtpInputDialog(
    onOtpEntered: (String) -> Unit,
    onDismiss: () -> Unit,
    showToast: (String) -> Unit
) {
    var otpValue by remember { mutableStateOf("") }

    AlertDialog(
        onDismissRequest = { onDismiss() },
        title = { Text(text = "Enter OTP") },
        text = {
            Column {
                Text(text = "Please enter the OTP:")
                Spacer(modifier = Modifier.height(8.dp))
//                TextField(
//                    value = otp,
//                    onValueChange = { otp = it },
//                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
//                    singleLine = true,
//                    modifier = Modifier.fillMaxWidth()
//                )
                OTPInputView(){ otp ->
                    otpValue = otp}
            }
        },
        confirmButton = {
            Button(
                onClick = {
                    onOtpEntered(otpValue)
                    showToast("Entered OTP: $otpValue")
                }
            ) {
                Text(text = "Submit")
            }
        },
        dismissButton = {
            Button(
                onClick = { onDismiss() }
            ) {
                Text(text = "Cancel")
            }
        }
    )
}

@Composable
fun OTPInputView(
    numberOfDigits: Int = 4,
    onOtpEntered: (String) -> Unit
) {
    val digitStates = remember { mutableStateListOf<String>() }
    repeat(numberOfDigits) {
        digitStates.add("")
    }

    Box(Modifier.fillMaxWidth().scrollable(ScrollableState { 0.5f },Orientation.Horizontal), contentAlignment = Alignment.Center,) {
        Row(
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ) {
            val focusRequesters = remember { List(numberOfDigits) { FocusRequester() } }

            for (index in 0 until numberOfDigits) {
                val modifier = Modifier
                    .padding(4.dp)
                    .width(48.dp)
                    .height(48.dp)
                    .background(Color.LightGray)
                    .clip(RoundedCornerShape(4.dp))
                    .focusRequester(focusRequesters[index])

                TextField(
                    value = digitStates[index],
                    onValueChange = { newValue ->
                        if (newValue.length <= 1) {
                            digitStates[index] = newValue
                            if (newValue.isNotEmpty() && index < numberOfDigits - 1) {
                                focusRequesters[index + 1].requestFocus()
                            }
                        }
                    },
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                    singleLine = true,
                    maxLines = 1,
                    modifier = modifier
                        .onPreviewKeyEvent {
                            if (it.nativeKeyEvent.keyCode == KEYCODE_DEL && digitStates[index].isEmpty() && index > 0) {
                                digitStates[index - 1] = ""
                                focusRequesters[index - 1].requestFocus()
                                true
                            } else {
                                false
                            }
                        }
                )
            }
        }
    }

    // Collect the entered digits and invoke the callback when the OTP is complete
    val otp = digitStates.joinToString("")
    if (otp.length == numberOfDigits) {
        onOtpEntered(otp)
    }
}




//And use it like this
val isOtpDialogVisible =false
          if (isOtpDialogVisible) {
                        OtpInputDialog(
                            onOtpEntered = { otp ->
                                // Handle the entered OTP here
                                showToast("Entered OTP: $otp")
                                isOtpDialogVisible = false // Close the dialog
                            },
                            onDismiss = { isOtpDialogVisible = false },
                            showToast = showToast
                        )
                    }

